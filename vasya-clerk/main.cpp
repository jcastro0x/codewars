#define BOOST_TEST_MODULE VasyaClerk
#include <boost/test/included/unit_test.hpp>

#include <string>
#include <vector>
#include <algorithm>
#include <array>

// Help constexpr to yes or no values
constexpr const char* YES = "YES";
constexpr const char* NO  = "NO";

// How much cost the ticket?
constexpr int ticketCost  = 25;

using billsArray_t = std::array<int,3>;
constexpr billsArray_t billsTypes = { 25, 50, 100 };


constexpr int indexOfBill(int bill)
{
    for(size_t i = 0; i < billsTypes.size(); i++)
        if(bill == billsTypes[i]) return static_cast<int>(i);
    throw 1;
}

inline bool removeBillsFrom(int money, billsArray_t& savedBills)
{
    int index = billsTypes.size() -1;
    while(money > 0 && index >= 0)
    {
        const int billAmount = billsTypes[index];
        if(savedBills[index] > 0 && money >= billAmount)
        {
            money -= billAmount;
            --savedBills[index];
        }
        else index--;
    }

    return money == 0;
}

std::string tickets(const std::vector<int>& bills)
{
    billsArray_t savedBills { };
    for(const auto& bill : bills)
    {
        ++savedBills[indexOfBill(bill)];
        if(const int difference = bill - ticketCost; difference != 0)
        {
            if(!removeBillsFrom(difference, savedBills))
                return NO;
        }
    }

    return YES;
}



BOOST_AUTO_TEST_CASE(UniqueTest)
{
    BOOST_TEST(tickets({25,25,50})        == YES);
    BOOST_TEST(tickets({25,25,50,100})    == YES);
    BOOST_TEST(tickets({25,25,50,50})     == YES);
    BOOST_TEST(tickets({25,50,25,25,100}) == YES);
    BOOST_TEST(tickets({25,100})          ==  NO);
    BOOST_TEST(tickets({25,25,100})       ==  NO);
    BOOST_TEST(tickets({50,25})           ==  NO);
    BOOST_TEST(tickets({25,25,25,100})    == YES);
}


















//#define BOOST_TEST_MODULE VasyaClerk
//#include <boost/test/included/unit_test.hpp>
//
//#include <string>
//#include <vector>
//#include <iostream>
//#include <cassert>
//
////~================================================================================================
//// This program does a lot more than exercise ask.
//// It can manage all types of currency situations like all U.S paper and coins money.
//// Also allows adding more kind of money (like the no longer bills as $500, $1.000,
//// $5.000 and $10.000 bills) or non-legal invented currency (like a coin of $3 or $22 bill).
////
//// Sorry for the change, but I though was very nice to do it =)
////~================================================================================================
//
//// How much cost the ticket?
//constexpr int ticketCost  = 25;
//
//// Help constexpr to yes or no values
//constexpr const char* YES = "YES";
//constexpr const char* NO  = "NO";
//
//// Types of available bills
//// I prefer c-array over std::array to make more easy to add new bills,
//// therefore, the user doesn't need to update N elements of std::array
//// and instead will be automatically generated by constexpr billsTypesCount
//constexpr int billsTypes[]       = { 1, 2, 5, 10, 20, 50, 100 };
//constexpr float coinsTypes[]     = { .01f, .05f, .10f, .25f, .50f, 1.0f };
//constexpr size_t billsTypesCount = sizeof(billsTypes) / sizeof(*billsTypes);
//constexpr size_t coinsTypesCount = sizeof(coinsTypes) / sizeof(*coinsTypes);
//
//constexpr int indexOfBill(int bill)
//{
//    for(int i = 0; i < billsTypesCount; i++)
//    {
//        if(bill == billsTypes[i]) return i;
//    }
//
//    return -1;
//}
//
//std::string tickets(const std::vector<int>& bills)
//{
//    std::vector<size_t> savedBills(billsTypesCount, 0);
//
//    for(const auto& bill : bills)
//    {
//        // Check: Client has enough money?
//        assert(bill >= ticketCost);
//
//        // Check: Client's bill is available bill?
//        int billIndex    = indexOfBill(bill);
//        assert(billIndex != -1);
//
//        int difference = bill - ticketCost;
//        if(difference != 0)
//        {
//            int differenceBillIndex = indexOfBill(difference);
//            if(differenceBillIndex >= 0)
//            {
//                if(--savedBills[differenceBillIndex] < 0) return NO;
//            }
//            else
//            {
//                return NO;
//            }
//        }
//        else
//        {
//            ++savedBills[billIndex];
//        }
//    }
//
//    return YES;
//}
//
//BOOST_AUTO_TEST_CASE(UniqueTest)
//{
//    BOOST_TEST(tickets({25,25,50,50})     == YES);
//    BOOST_TEST(tickets({25,100})          == NO);
//    BOOST_TEST(tickets({25,50,25,25,100}) == YES);
//}
